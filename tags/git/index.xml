<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Feiy</title><link>https://Aithan-web.github.io/tags/git/</link><description>Recent content in Git on Feiy</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Feiy</copyright><lastBuildDate>Sun, 02 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://Aithan-web.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 基础</title><link>https://Aithan-web.github.io/p/git-%E5%9F%BA%E7%A1%80/</link><pubDate>Sun, 02 Jun 2024 00:00:00 +0000</pubDate><guid>https://Aithan-web.github.io/p/git-%E5%9F%BA%E7%A1%80/</guid><description>&lt;img src="https://Aithan-web.github.io/p/git-%E5%9F%BA%E7%A1%80/Git.jpg" alt="Featured image of post Git 基础" />&lt;p>Git 是一个分布式版本控制系统，它是一种用于管理文件和目录的软件工具，广泛应用于软件开发领域。&lt;/p>
&lt;h1 id="1-git基本信息">1 Git基本信息
&lt;/h1>&lt;h2 id="11-git-的定义">1.1 Git 的定义
&lt;/h2>&lt;h3 id="111-版本控制系统vcs">1.1.1 版本控制系统（VCS）
&lt;/h3>&lt;p>版本控制系统是一种记录文件和目录变化历史的工具。它可以帮助用户跟踪文件的修改、比较不同版本之间的差异、恢复到旧版本等。&lt;br>
版本控制系统分为集中式和分布式两种。Git 是一种分布式版本控制系统，这意味着每个开发者在本地都有一个完整的代码仓库副本，包括代码文件、历史记录等。&lt;br>&lt;/p>
&lt;h3 id="112-git-的特点">1.1.2 Git 的特点
&lt;/h3>&lt;p>&lt;strong>分布式架构&lt;/strong>：每个开发者都有完整的代码仓库副本，可以在本地进行离线开发，然后将更改推送到远程仓库。&lt;br>
&lt;strong>高效性&lt;/strong>：Git 使用高效的存储和检索机制，能够快速处理大量的文件和复杂的项目。&lt;br>
&lt;strong>分支功能强大&lt;/strong>：Git 的分支操作非常灵活，可以轻松创建、切换、合并和删除分支，方便开发者进行功能开发、修复问题等。&lt;br>
&lt;strong>安全性&lt;/strong>：Git 使用 SHA-1 散列算法对每个提交进行唯一标识，确保数据的完整性和安全性。&lt;br>&lt;/p>
&lt;h2 id="12-git-的用途">1.2 Git 的用途
&lt;/h2>&lt;h3 id="121-软件开发">1.2.1 软件开发
&lt;/h3>&lt;p>&lt;strong>代码管理&lt;/strong>：Git 可以帮助开发者管理代码文件，记录代码的修改历史，方便团队协作开发。&lt;br>
&lt;strong>版本控制&lt;/strong>：开发者可以通过 Git 创建不同的版本，如开发版本、测试版本和生产版本，方便管理和发布软件。&lt;br>
&lt;strong>团队协作&lt;/strong>：Git 支持多个开发者同时工作，通过分支和合并机制，可以有效地协调开发进度，减少冲突。&lt;br>
&lt;strong>代码审查&lt;/strong>：Git 提供了代码审查的功能，开发者可以提交代码后，由其他开发者进行审查，确保代码质量。&lt;br>&lt;/p>
&lt;h3 id="122-个人项目">1.2.2 个人项目
&lt;/h3>&lt;p>&lt;strong>文档管理&lt;/strong>：Git 也可以用于管理文档、配置文件等，记录文件的修改历史，方便版本回溯。&lt;br>
&lt;strong>学习记录&lt;/strong>：对于学习编程的人来说，Git 可以帮助记录学习过程中的代码修改，方便回顾和总结。&lt;br>&lt;/p>
&lt;h2 id="13-git-的工作原理">1.3 Git 的工作原理
&lt;/h2>&lt;p>&lt;strong>工作区（Working Directory）&lt;/strong>：工作区是开发者实际操作的目录，包含了项目的文件和目录。开发者可以在工作区中修改文件、添加新文件等。&lt;br>
&lt;strong>暂存区（Staging Area）&lt;/strong>：暂存区是一个临时存储区域，用于存放即将提交到仓库的文件。当开发者使用 &lt;code>git add&lt;/code> 命令时，文件会被添加到暂存区。&lt;br>
&lt;strong>本地仓库（Local Repository）&lt;/strong>：本地仓库是存储在本地的代码仓库副本，包含了项目的完整历史记录。开发者可以通过 &lt;code>git commit&lt;/code> 命令将暂存区的文件提交到本地仓库。&lt;br>
&lt;strong>远程仓库（Remote Repository）&lt;/strong>：远程仓库是存储在服务器上的代码仓库副本，用于团队协作和代码备份。开发者可以通过 &lt;code>git push&lt;/code> 命令将本地仓库的更改推送到远程仓库，也可以通过 &lt;code>git pull&lt;/code> 命令从远程仓库拉取最新的更改。&lt;br>&lt;/p>
&lt;h2 id="14-git-的优势">1.4 Git 的优势
&lt;/h2>&lt;p>&lt;strong>灵活性&lt;/strong>：Git 的分布式架构使得开发者可以在本地自由地进行开发，不受网络环境的限制。同时，Git 提供了丰富的命令和工具，可以满足不同开发场景的需求。&lt;br>
&lt;strong>高效性&lt;/strong>：Git 的数据存储和检索机制非常高效，能够快速处理大量的文件和复杂的项目。Git 的分支操作也非常快速，不会影响其他分支的开发。&lt;br>
&lt;strong>安全性&lt;/strong>：Git 使用 SHA-1 散列算法对每个提交进行唯一标识，确保数据的完整性和安全性。Git 还提供了权限管理功能，可以控制不同用户对仓库的访问权限。&lt;br>
&lt;strong>社区支持&lt;/strong>：Git 是开源软件，拥有庞大的用户社区和丰富的文档资源。开发者可以通过社区获取技术支持和经验分享，也可以参与到 Git 的开发和改进中。&lt;br>&lt;/p>
&lt;h2 id="15-git-的应用场景">1.5 Git 的应用场景
&lt;/h2>&lt;p>&lt;strong>开源项目&lt;/strong>：许多开源项目使用 Git 来管理代码，如 Linux 内核、Git 本身等。开发者可以通过 Git 克隆开源项目的代码仓库，参与项目开发，提交代码贡献。&lt;br>
&lt;strong>企业开发&lt;/strong>：企业也广泛使用 Git 来管理软件开发项目。Git 的分支功能和团队协作机制可以帮助企业高效地进行项目开发和版本管理。&lt;br>
&lt;strong>个人学习&lt;/strong>：对于学习编程的人来说，Git 是一个非常有用的工具。可以通过 Git 记录学习过程中的代码修改，方便回顾和总结。&lt;br>&lt;/p>
&lt;h1 id="2-windows安装-git">2. Windows安装 Git
&lt;/h1>&lt;p>访问 Git 官方网站（&lt;a class="link" href="https://git-scm.com/" target="_blank" rel="noopener"
>https://git-scm.com/&lt;/a>），下载对应版本的安装程序。&lt;br>
运行安装程序，按照提示进行安装。在安装过程中，可以选择默认的设置，如安装路径、默认的文本编辑器等。&lt;br>
安装完成后，在命令行工具（如 cmd 或 PowerShell）中输入 &lt;code>git --version&lt;/code>，如果显示 Git 的版本号，说明安装成功。&lt;br>&lt;/p>
&lt;p>&lt;img src="../../../git-base/git-v.png" alt="Git Version" width="500" height="100">&lt;br>&lt;/p>
&lt;h1 id="3-配置-git">3 配置 Git
&lt;/h1>&lt;h3 id="31-全局配置">3.1 全局配置
&lt;/h3>&lt;p>配置用户名和邮箱，这些信息会在提交代码时被记录。在命令行中输入以下命令：&lt;br>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git config --global user.name &amp;#34;用户名&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git config --global user.email &amp;#34;邮箱地址&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样配置后，无论在哪个项目中提交代码，都会使用这个用户名和邮箱。&lt;br>&lt;/p>
&lt;h3 id="32-本地配置可选">3.2 本地配置（可选）
&lt;/h3>&lt;p>如果要为某个特定的项目设置不同的用户名和邮箱，可以在项目的根目录下运行以下命令：&lt;br>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git config user.name &amp;#34;特定项目的用户名&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git config user.email &amp;#34;特定项目的邮箱地址&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样只会对该项目产生影响，而不会影响其他项目。&lt;br>&lt;/p>
&lt;h1 id="4-本地仓库">4 本地仓库
&lt;/h1>&lt;h3 id="41-初始化新仓库">4.1 初始化新仓库
&lt;/h3>&lt;p>首先，创建一个目录作为你的项目文件夹。在命令行中输入 &lt;code>mkdir 项目名称&lt;/code>，然后进入该目录，使用命令 &lt;code>cd 项目名称&lt;/code>。&lt;br>
在项目目录中运行 &lt;code>git init&lt;/code> 命令来初始化一个 Git 仓库。这个命令会在当前目录下创建一个名为 &lt;code>.git&lt;/code> 的隐藏目录，里面包含了 Git 仓库的所有必要文件。&lt;br>&lt;/p>
&lt;h3 id="42-克隆现有仓库">4.2 克隆现有仓库
&lt;/h3>&lt;p>如果想使用一个已经存在的远程仓库，可以通过克隆的方式来获取代码。在命令行中输入 &lt;code>git clone 远程仓库地址&lt;/code>（例如 &lt;code>https://github.com/用户名/仓库名.git&lt;/code>）。&lt;br>
克隆完成后，Git 会创建一个与远程仓库同名的本地目录，并将远程仓库中的代码和历史记录都复制到本地目录中。&lt;br>&lt;/p>
&lt;h3 id="43-添加文件到仓库">4.3 添加文件到仓库
&lt;/h3>&lt;ol>
&lt;li>添加单个文件
当在项目目录中创建或修改了一个文件后，需要将这个文件添加到暂存区（staging area）。&lt;br>
使用命令 &lt;code>git add 文件名&lt;/code>（例如 &lt;code>git add README.md&lt;/code>）。&lt;br>
这样，Git 就会将这个文件标记为即将提交的内容。&lt;br>&lt;/li>
&lt;li>添加多个文件
如果一次性修改了多个文件，可以使用 &lt;code>git add .&lt;/code> 命令将当前目录下的所有修改过的文件添加到暂存区。&lt;br>
也可以使用 &lt;code>git add -A&lt;/code> 命令，它会将所有修改过的文件（包括新添加的文件、修改过的文件和删除的文件）都添加到暂存区。&lt;br>&lt;/li>
&lt;li>查看状态
在添加文件之前或之后，可以使用 &lt;code>git status&lt;/code> 命令来查看当前仓库的状态。这个命令显示哪些文件已经被添加到暂存区，哪些文件还没有被添加，以及是否有未跟踪的文件等信息。&lt;br>&lt;/li>
&lt;/ol>
&lt;h3 id="44-提交文件到仓库">4.4 提交文件到仓库
&lt;/h3>&lt;ol>
&lt;li>提交更改
当你将文件添加到暂存区后，就可以使用 &lt;code>git commit&lt;/code> 命令将这些更改提交到本地仓库了。在命令行中输入 &lt;code>git commit -m &amp;quot;提交信息&amp;quot;&lt;/code>（将“提交信息”替换为你对这次提交的描述，例如 “添加了 README 文件”）。&lt;br>
提交信息是必须的，它可以帮助你和其他开发者了解这次提交的内容和目的。&lt;br>&lt;/li>
&lt;li>查看提交日志
提交完成后，你可以使用 &lt;code>git log&lt;/code> 命令来查看提交日志。这个命令会显示每次提交的详细信息，包括提交的哈希值（commit hash）、提交者、提交日期和提交信息等。&lt;br>
如果你只想查看最近几次的提交，可以使用 &lt;code>git log -n&lt;/code> 命令（“n”为想要查看的提交数量，例如 &lt;code>git log -5&lt;/code> 表示查看最近 5 次提交）。&lt;br>&lt;/li>
&lt;/ol>
&lt;h1 id="5-与远程仓库交互">5 与远程仓库交互
&lt;/h1>&lt;ol>
&lt;li>添加远程仓库
如果之前是通过 &lt;code>git init&lt;/code> 初始化的本地仓库，需要将它与远程仓库关联起来。使用命令 &lt;code>git remote add origin 远程仓库地址&lt;/code>。&lt;br>
这里的“origin”是远程仓库的默认名称，可以根据实际需要使用其他名称。&lt;br>&lt;/li>
&lt;li>推送代码到远程仓库
当完成了本地的提交后，可以使用 &lt;code>git push&lt;/code> 命令将代码推送到远程仓库。在命令行中输入 &lt;code>git push -u origin main&lt;/code>（假设本次修改的本地分支是 main，远程分支也是 main）。&lt;br>
第一次推送时，&lt;code>-u&lt;/code> 参数会将本地分支与远程分支关联起来，以后就可以直接使用 &lt;code>git push&lt;/code> 命令来推送代码了。&lt;br>&lt;/li>
&lt;li>从远程仓库拉取代码
如果远程仓库中有新的代码更新，可以使用 &lt;code>git pull&lt;/code> 命令将这些更新拉取到本地仓库。在命令行中输入 &lt;code>git pull origin main&lt;/code>。&lt;br>
这个命令会自动将远程仓库中的更改合并到本地分支中。如果存在冲突，Git 会提示解决冲突后再完成合并。&lt;br>&lt;/li>
&lt;/ol>
&lt;h1 id="6-分支操作">6 分支操作
&lt;/h1>&lt;ol>
&lt;li>创建分支
在开发过程中可能需要创建新的分支来进行功能开发或修复问题。使用命令 &lt;code>git branch 分支名&lt;/code>来创建一个新的分支。&lt;br>
创建分支后，当掐仍然在原来的分支上，需要切换到新创建的分支。&lt;br>&lt;/li>
&lt;li>切换分支
使用命令 &lt;code>git checkout 分支名&lt;/code>来切换到目标分支。&lt;br>
也可以使用 &lt;code>git checkout -b 分支名&lt;/code> 命令来同时创建并切换到一个新的分支，这相当于先执行 &lt;code>git branch 分支名&lt;/code>，再执行 &lt;code>git checkout 分支名&lt;/code>。&lt;br>&lt;/li>
&lt;li>查看分支
使用 &lt;code>git branch&lt;/code> 命令可以查看当前仓库中的所有分支。当前所在的分支前面会有一个星号（*）标记。&lt;br>&lt;/li>
&lt;li>合并分支
当在某个分支上完成了开发工作，需要将分支的更改合并回主分支（如 main）。首先切换到主分支，然后使用命令 &lt;code>git merge 分支名&lt;/code>（“分支名”为要合并的分支名称）。&lt;br>
如果合并过程中没有冲突，Git 会自动完成合并。如果有冲突，Git 会提示需要手动解决冲突后再完成合并。&lt;br>&lt;/li>
&lt;li>删除分支
当不再需要某个分支时，可以使用 &lt;code>git branch -d 分支名&lt;/code>来删除该分支。&lt;br>
如果分支还没有被合并，Git 会阻止删除操作。如果确定要强制删除，可以使用 &lt;code>git branch -D 分支名&lt;/code> 命令。&lt;br>&lt;/li>
&lt;/ol>
&lt;h1 id="7-解决冲突">7 解决冲突
&lt;/h1>&lt;ol>
&lt;li>冲突产生的原因
当你在本地分支和远程分支（或不同的本地分支）上对同一个文件的同一部分进行了修改，然后尝试合并时，就会产生冲突。&lt;br>&lt;/li>
&lt;li>解决冲突的步骤
首先，Git 会标记出冲突的文件，并提示你解决冲突。打开冲突的文件，你会看到类似以下的内容：&lt;br>
&lt;code>&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/code>：表示本地分支的更改。&lt;br>
&lt;code>=======&lt;/code>：分隔符。&lt;br>
&lt;code>&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 分支名&lt;/code>：表示要合并的分支的更改。&lt;br>
你需要手动编辑文件，决定保留哪些更改，删除冲突标记（&lt;code>&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code>、&lt;code>=======&lt;/code> 和 `&lt;br>&lt;/li>
&lt;/ol></description></item></channel></rss>